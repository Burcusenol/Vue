v-model: inputun kontrol etmek istediği veriyi alır.
computed:Data gibi davranır ama metod gibi çalışır.
computed- metod farkı:computed kodu analiz eder ve ihtiyacı olan değişken değişmişse kodu çalıştırır data da değişiklik yoksa computed tekrardan execute etmez
Datadaki property gibi çalışır ama fonksiyon gibi tanımlanır.
Bir mantık karşılığında başka bir yeri etkilemek istiyorsak computed kullanıyoruz.
Copmuted senkronize çalışır.

watch:Asenkron olarak watch Data propertysi içindeki herhangi bir veriyi gözlemlemeyi sağlıyor.Onun değeri değiştiğinde watch devreye girer.Data içindeki property ile eşleşecek şekilde tanımlamak gerekiyor.

v-bind: :
v-on: @

Faydalı Linkler:

Resmi Döküman - Başlangıç: http://vuejs.org/guide/

Resmi Döküman - Template Syntax: http://vuejs.org/guide/syntax.html

Resmi Döküman - Events: http://vuejs.org/guide/events.html

Resmi Döküman - Computed Properties & Watchers: http://vuejs.org/guide/computed.html

Resmi Döküman - Class ve Style Binding: http://vuejs.org/guide/class-and-style.html

KOŞULLAR

v-show // v-if farkı: v-if'te şart sağlanmıyorsa dom üzerinden onu siler sonra tekrar ekler
v-show sadece gizleme işlemi yapar domdan silmez display:none

v-for (product,index)-->indexe alma işlemi yapar

border:border bir booster değil bir pixeldir

template-->render edilmez child elementleri contain eder.html yapısını bozmaz.

<strong>Bold olarak yazar </strong>

LİSTELER DÖKÜMAN
Resmi Döküman - Koşullar: https://vuejs.org/v2/guide/conditional.html

Resmi Döküman - Listeler: https://vuejs.org/v2/guide/list.html

























eb557749ee167e1649fe7a63a41907929314963a

 git cherry-pick 50ca2ee1b9fc61a0d2f017887882dcc3136c7b2d

git cherry-pick 94ba91d584609963b5093fe8e1e15bd6ce2a4571


 git cherry-pick 3a602332b12f60c3e123c9d2a7481517908c4900

   [HttpGet("getproducts")]
        public async Task<IActionResult> GetProducts(){
    
           var query=(from product in _financeContext.Products
             join calculation in _financeContext.Calculations on product.CalculationId equals calculation.CalculationId
             select new
             {
                product.Code,
                CalculationId=product.CalculationId,
                calculation.FinanceAmount,
                calculation.InstallmentAmount
             }).Take(100).ToList();
 
            //return Ok(query);
           
            
           return new OkObjectResult(new ResultViewModel<Object> {Result=query,Success=true,ErrorMessage=" "});
            
        }


  <el-col>
      Burcu
    </el-col>

    <el-table :data="products" border style="width: 100%">
      <el-table-column prop="code" label="Code" width="180"> </el-table-column>
      <el-table-column prop="calculationId" label="CalculationId" width="180">
      </el-table-column>
      <el-table-column prop="financeAmount" label="FinanceAmount" width="180">
      </el-table-column>
      <el-table-column
        prop="installmentAmount"
        label="InstallmentAmount"
        width="180"
      >
      </el-table-column>
    </el-table>

    <div style="margin-top: 20px" class=" md-2 row">
      <div class="col-md-2">
        <el-button type="button" class="btn" @click="totalFinanceAmount">
          Finance Sum</el-button
        >
        <el-button type="button" class="btn" @click="totalInstallmentAmount">
          Installment Sum</el-button
        >
        <el-button
          type="button"
          class="btn"
          @click="totalFinanceAndInstallmentAmount"
        >
          Finance And Installment Sum</el-button
        >
      </div>
    </div>

    <el-col :span="3" style="margin-left:30px">
      <p id="finance"></p>
    </el-col>
    <el-col :span="5" style="margin-left:50px"> <p id="amount"></p></el-col>
    <el-col :span="8" style="margin-left:20px">
      <p id="total"></p>
    </el-col>
  </div>
</template>



clean code kitabı